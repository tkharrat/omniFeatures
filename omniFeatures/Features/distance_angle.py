# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_distance_angle.ipynb.

# %% auto 0
__all__ = ['Dist_ang']

# %% ../nbs/02_distance_angle.ipynb 4
import collections
import math
import os
import re

import numpy as np
import pandas as pd
from fastcore.foundation import L

# %% ../nbs/02_distance_angle.ipynb 8
class Dist_ang:
    def __init__(self, frame, events_to_frame, lineup):
        self.frame, self.lineup, self.events_to_frame = frame, lineup, events_to_frame
        self.gk_ids = lineup[lineup.position == "GK"].playerId.tolist()
        self.frame_id = frame.name
        self.possession_team_id = events_to_frame.loc[
            events_to_frame.frameId == self.frame_id, "teamId"
        ].values[0]
        self.possession_side = self.lineup.loc[
            self.lineup.teamId == self.possession_team_id, "side"
        ].values[0]
        self.opponent_side = "away" if bool(re.match("home",self.possession_side)) else "home"
        self.ball_carrier_id = events_to_frame.loc[
            events_to_frame.frameId == self.frame_id, "playerId"
        ].values[0]
        self.output = {"frameId": self.frame_id}
        
    def _prepare_inputs(self):
        "Prepare necessary inputs to pass to the clustering algorithm"
        _player_id_cols = self.frame.filter(like="_player_id").index.tolist()
        linputs = L(
                {
                    "playerId": self.frame[pid_col],
                    "playerStr": pid_col.removesuffix("_player_id"),
                    "jerseyNumber": int(
                        pid_col.removesuffix("_player_id")
                        .removeprefix("away_player_")
                        .removeprefix("home_player_")
                    ),
                    "side": "home" if bool(re.match("home", pid_col)) else "away",
                    "gy_post1": 30.34,
                    "gy_post2": 37.66,
                    "gx": 105 if bool(re.match("home", pid_col)) else 0,
                    "gy": 34,
                    "x": self.frame[pid_col.removesuffix("_player_id") + "_x"],
                    "y": self.frame[pid_col.removesuffix("_player_id") + "_y"],
                    "vx": self.frame[pid_col.removesuffix("_player_id") + "_vx"],
                    "vy": self.frame[pid_col.removesuffix("_player_id") + "_vy"],
                }
                for pid_col in _player_id_cols
            )
        
        self.inputs = pd.DataFrame(linputs).dropna(axis=0)
        
        self.home_gk_id = self.gk_ids[0] if self.inputs[self.inputs.playerId == self.gk_ids[0]].side.values[0] == "home" else self.gk_ids[1]
        self.away_gk_id = self.gk_ids[0] if self.inputs[self.inputs.playerId == self.gk_ids[0]].side.values[0] == "away" else self.gk_ids[1]
        
    def dist(self,point1,point2):
        "compute distance between two points"
        return math.sqrt( 
            (point1[0] - point2[0])**2 + (point1[1] - point2[1])**2 
        )
    
    def angle(self,point1,point2,angle_point):
        "compute angle, cos and sin between three points"
        a = np.array(point1)
        b = np.array(angle_point)
        c = np.array(point2)
    
        ba = a - b
        bc = c - b
    
        cos_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc))
        angle = np.arccos(cos_angle)
        sin_angle = np.sin(angle)
        
        return np.degrees(angle), cos_angle, sin_angle
    
    def _distance(self):
        "compute distance between every player and ball"
        pl_to_ball = {
            col+"_ball_dist": self.dist(
                [x,y],
                [
                    self.frame["ball_x"],
                    self.frame["ball_y"]
                ]
            )
            for col,x,y in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
            ) 
        }
        
        "compute distance between every player and goal"
        pl_to_goal = {
            col+"_goal_dist": self.dist(
                [x,y],
                [gx,gy]
            )
            for col,x,y,gx,gy in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
                self.inputs.gx.tolist(),
                self.inputs.gy.tolist(),
            ) 
        }
        

        self.output.update(pl_to_ball)
        self.output.update(pl_to_goal)
        
        "compute distance between the ball and the goalkeeper in y-axis"
        self.output[self.inputs[self.inputs.playerId == self.home_gk_id].playerStr.values[0] +
                "_ball_y_dist"] = self.frame["ball_y"] - self.inputs[
            self.inputs.playerId == self.home_gk_id].y.values[0]
        
        self.output[self.inputs[self.inputs.playerId == self.away_gk_id].playerStr.values[0] +
                "_ball_y_dist"] = self.frame["ball_y"] - self.inputs[
            self.inputs.playerId == self.away_gk_id].y.values[0]  
        
        "compute distance between ball and goal"
        self.output["ball_homegoal_dist"] = self.dist(
            [
                self.inputs[self.inputs.playerId == self.home_gk_id].x.values[0],
                self.inputs[self.inputs.playerId == self.home_gk_id].y.values[0]
            ],
            [0,34]
        )
        self.output["ball_awaygoal_dist"] = self.dist(
            [
                self.inputs[self.inputs.playerId == self.away_gk_id].x.values[0],
                self.inputs[self.inputs.playerId == self.away_gk_id].y.values[0]
            ],
            [105,34]
        )
        
    def _angle(self):
        "compute all angle features"
        
        self.output["ball_homegoal_angle"] = self.angle(
            [0,30.34],
            [0,37.66],
            [
                self.frame["ball_x"],
                self.frame["ball_y"]
            ],
        )[0]
        
        self.output["ball_awaygoal_angle"] = self.angle(
            [105,30.34],
            [105,37.66],
            [
                self.frame["ball_x"],
                self.frame["ball_y"]
            ],
        )[0]
        
        pl_goal_angle = {
            col+"_goal_angle": self.angle(
                [gx,gy_post1],
                [gx,gy_post2],
                [x,y]
            )[0]
            for col,x,y,gx,gy_post1,gy_post2 in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
                self.inputs.gx.tolist(),
                self.inputs.gy_post1.tolist(),
                self.inputs.gy_post2.tolist(),
                
            )
        }
        
        pl_goal_cos = {
            col+"_goal_cos": self.angle(
                [gx,gy_post1],
                [gx,gy_post2],
                [x,y]
            )[1]
            for col,x,y,gx,gy_post1,gy_post2 in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
                self.inputs.gx.tolist(),
                self.inputs.gy_post1.tolist(),
                self.inputs.gy_post2.tolist(),
            ) 
        }
        
        pl_goal_sin = {
            col+"_goal_sin": self.angle(
                [gx,gy_post1],
                [gx,gy_post2],
                [x,y]
            )[2]
            for col,x,y,gx,gy_post1,gy_post2 in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
                self.inputs.gx.tolist(),
                self.inputs.gy_post1.tolist(),
                self.inputs.gy_post2.tolist(),
            )
        }

        pl_vballcarrier_cos = {
            col+"_vballcarrier_cos": self.angle(
                [x,y],
                
                [
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].vx.values[0],
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].vy.values[0]
                ],
                
                [
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].x.values[0],
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].y.values[0]
                ]
            )[1]
            for col,x,y in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
            )
        }
        
        pl_vballcarrier_sin = {
            col+"_vballcarrier_sin": self.angle(
                [x,y],
                
                [
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].vx.values[0],
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].vy.values[0]
                ],
                
                [
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].x.values[0],
                    self.inputs[self.inputs.playerId == self.ball_carrier_id].y.values[0]
                ]
            )[2]
            for col,x,y in zip(
                self.inputs.playerStr.tolist(),
                self.inputs.x.tolist(),
                self.inputs.y.tolist(),
            )
        }
        
        self.output.update(pl_goal_angle)
        self.output.update(pl_goal_cos)
        self.output.update(pl_goal_sin)
        self.output.update(pl_vballcarrier_cos)
        self.output.update(pl_vballcarrier_sin)
        
        self.df = pd.DataFrame(self.output,index=[0])
